// Code generated by gensyscall. DO NOT EDIT.
package simulation

import (
	"syscall"
	"time"
	"unsafe"

	"golang.org/x/sys/unix"

	"github.com/jellevandenhooff/gosim/internal/simulation/fs"
	"github.com/jellevandenhooff/gosim/internal/simulation/syscallabi"
)

// prevent unused imports
var (
	_ unsafe.Pointer
	_ time.Duration
	_ syscallabi.ValueView[any]
	_ syscall.Errno
	_ fs.InodeInfo
	_ unix.Errno
)

// gosimOSIface is the interface *GosimOS must implement to work
// with HandleSyscall. The interface is not used but helpful for implementing
// new syscalls.
type gosimOSIface interface {
	MachineGetLabel(machineID int) (label string, err error)
	MachineInodeInfo(machineID int, inodeID int, info syscallabi.ValueView[fs.InodeInfo])
	MachineNew(label string, addr string, program any) (machineID int)
	MachineRecoverInit(machineID int, program any) (iterID int)
	MachineRecoverNext(iterID int) (machineID int, ok bool)
	MachineRecoverRelease(iterID int)
	MachineRestart(machineID int, partialDisk bool) (err error)
	MachineSetBootProgram(machineID int, program any) (err error)
	MachineSetSometimesCrashOnSync(machineID int, crash bool) (err error)
	MachineStop(machineID int, graceful bool)
	MachineWait(machineID int, syscall *syscallabi.Syscall)
	SetConnected(a string, b string, connected bool) (err error)
	SetDelay(a string, b string, delay time.Duration) (err error)
	SetSimulationTimeout(timeout time.Duration) (err error)
}

var _ gosimOSIface = &GosimOS{}

//go:norace
func (os *GosimOS) dispatchSyscall(s *syscallabi.Syscall) {
	// XXX: help this happens for globals in os
	if os == nil {
		s.Errno = uintptr(syscall.ENOSYS)
		return
	}
	os.dispatcher.Dispatch(s)
}

//go:norace
func (os *GosimOS) HandleSyscall(syscall *syscallabi.Syscall) {
	switch syscall.Trap {
	case 1011:
		// called by (for find references):
		_ = SyscallMachineGetLabel
		machineID := int(syscall.Int0)
		label, err := os.MachineGetLabel(machineID)
		syscall.RPtr0 = label
		syscall.Errno = syscallabi.ErrErrno(err)
		syscall.Complete()
	case 1005:
		// called by (for find references):
		_ = SyscallMachineInodeInfo
		machineID := int(syscall.Int0)
		inodeID := int(syscall.Int1)
		info := syscallabi.NewValueView(syscall.Ptr2.(*fs.InodeInfo))
		os.MachineInodeInfo(machineID, inodeID, info)
		syscall.Complete()
	case 1003:
		// called by (for find references):
		_ = SyscallMachineNew
		label := syscall.Ptr0.(string)
		addr := syscall.Ptr1.(string)
		program := syscall.Ptr2.(any)
		machineID := os.MachineNew(label, addr, program)
		syscall.R0 = uintptr(machineID)
		syscall.Complete()
	case 1007:
		// called by (for find references):
		_ = SyscallMachineRecoverInit
		machineID := int(syscall.Int0)
		program := syscall.Ptr1.(any)
		iterID := os.MachineRecoverInit(machineID, program)
		syscall.R0 = uintptr(iterID)
		syscall.Complete()
	case 1008:
		// called by (for find references):
		_ = SyscallMachineRecoverNext
		iterID := int(syscall.Int0)
		machineID, ok := os.MachineRecoverNext(iterID)
		syscall.R0 = uintptr(machineID)
		syscall.R1 = syscallabi.BoolToUintptr(ok)
		syscall.Complete()
	case 1009:
		// called by (for find references):
		_ = SyscallMachineRecoverRelease
		iterID := int(syscall.Int0)
		os.MachineRecoverRelease(iterID)
		syscall.Complete()
	case 1010:
		// called by (for find references):
		_ = SyscallMachineRestart
		machineID := int(syscall.Int0)
		partialDisk := syscallabi.BoolFromUintptr(syscall.Int1)
		err := os.MachineRestart(machineID, partialDisk)
		syscall.Errno = syscallabi.ErrErrno(err)
		syscall.Complete()
	case 1012:
		// called by (for find references):
		_ = SyscallMachineSetBootProgram
		machineID := int(syscall.Int0)
		program := syscall.Ptr1.(any)
		err := os.MachineSetBootProgram(machineID, program)
		syscall.Errno = syscallabi.ErrErrno(err)
		syscall.Complete()
	case 1013:
		// called by (for find references):
		_ = SyscallMachineSetSometimesCrashOnSync
		machineID := int(syscall.Int0)
		crash := syscallabi.BoolFromUintptr(syscall.Int1)
		err := os.MachineSetSometimesCrashOnSync(machineID, crash)
		syscall.Errno = syscallabi.ErrErrno(err)
		syscall.Complete()
	case 1004:
		// called by (for find references):
		_ = SyscallMachineStop
		machineID := int(syscall.Int0)
		graceful := syscallabi.BoolFromUintptr(syscall.Int1)
		os.MachineStop(machineID, graceful)
		syscall.Complete()
	case 1006:
		// called by (for find references):
		_ = SyscallMachineWait
		machineID := int(syscall.Int0)
		os.MachineWait(machineID, syscall)
	case 1001:
		// called by (for find references):
		_ = SyscallSetConnected
		a := syscall.Ptr0.(string)
		b := syscall.Ptr1.(string)
		connected := syscallabi.BoolFromUintptr(syscall.Int2)
		err := os.SetConnected(a, b, connected)
		syscall.Errno = syscallabi.ErrErrno(err)
		syscall.Complete()
	case 1002:
		// called by (for find references):
		_ = SyscallSetDelay
		a := syscall.Ptr0.(string)
		b := syscall.Ptr1.(string)
		delay := time.Duration(syscall.Int2)
		err := os.SetDelay(a, b, delay)
		syscall.Errno = syscallabi.ErrErrno(err)
		syscall.Complete()
	case 1000:
		// called by (for find references):
		_ = SyscallSetSimulationTimeout
		timeout := time.Duration(syscall.Int0)
		err := os.SetSimulationTimeout(timeout)
		syscall.Errno = syscallabi.ErrErrno(err)
		syscall.Complete()
	default:
		panic("bad")
	}
}

//go:norace
func SyscallMachineGetLabel(machineID int) (label string, err error) {
	// invokes (for go to definition):
	_ = (*GosimOS).MachineGetLabel
	syscall := syscallabi.GetGoroutineLocalSyscall()
	syscall.OS = gosimOS
	syscall.Trap = 1011
	syscall.Int0 = uintptr(machineID)
	gosimOS.dispatchSyscall(syscall)
	label = syscall.RPtr0.(string)
	err = syscallabi.ErrnoErr(syscall.Errno)
	return
}

//go:norace
func SyscallMachineInodeInfo(machineID int, inodeID int, info *fs.InodeInfo) {
	// invokes (for go to definition):
	_ = (*GosimOS).MachineInodeInfo
	syscall := syscallabi.GetGoroutineLocalSyscall()
	syscall.OS = gosimOS
	syscall.Trap = 1005
	syscall.Int0 = uintptr(machineID)
	syscall.Int1 = uintptr(inodeID)
	syscall.Ptr2 = info
	gosimOS.dispatchSyscall(syscall)
	syscall.Ptr2 = nil
	return
}

//go:norace
func SyscallMachineNew(label string, addr string, program any) (machineID int) {
	// invokes (for go to definition):
	_ = (*GosimOS).MachineNew
	syscall := syscallabi.GetGoroutineLocalSyscall()
	syscall.OS = gosimOS
	syscall.Trap = 1003
	syscall.Ptr0 = label
	syscall.Ptr1 = addr
	syscall.Ptr2 = program
	gosimOS.dispatchSyscall(syscall)
	machineID = int(syscall.R0)
	syscall.Ptr0 = nil
	syscall.Ptr1 = nil
	syscall.Ptr2 = nil
	return
}

//go:norace
func SyscallMachineRecoverInit(machineID int, program any) (iterID int) {
	// invokes (for go to definition):
	_ = (*GosimOS).MachineRecoverInit
	syscall := syscallabi.GetGoroutineLocalSyscall()
	syscall.OS = gosimOS
	syscall.Trap = 1007
	syscall.Int0 = uintptr(machineID)
	syscall.Ptr1 = program
	gosimOS.dispatchSyscall(syscall)
	iterID = int(syscall.R0)
	syscall.Ptr1 = nil
	return
}

//go:norace
func SyscallMachineRecoverNext(iterID int) (machineID int, ok bool) {
	// invokes (for go to definition):
	_ = (*GosimOS).MachineRecoverNext
	syscall := syscallabi.GetGoroutineLocalSyscall()
	syscall.OS = gosimOS
	syscall.Trap = 1008
	syscall.Int0 = uintptr(iterID)
	gosimOS.dispatchSyscall(syscall)
	machineID = int(syscall.R0)
	ok = syscallabi.BoolFromUintptr(syscall.R1)
	return
}

//go:norace
func SyscallMachineRecoverRelease(iterID int) {
	// invokes (for go to definition):
	_ = (*GosimOS).MachineRecoverRelease
	syscall := syscallabi.GetGoroutineLocalSyscall()
	syscall.OS = gosimOS
	syscall.Trap = 1009
	syscall.Int0 = uintptr(iterID)
	gosimOS.dispatchSyscall(syscall)
	return
}

//go:norace
func SyscallMachineRestart(machineID int, partialDisk bool) (err error) {
	// invokes (for go to definition):
	_ = (*GosimOS).MachineRestart
	syscall := syscallabi.GetGoroutineLocalSyscall()
	syscall.OS = gosimOS
	syscall.Trap = 1010
	syscall.Int0 = uintptr(machineID)
	syscall.Int1 = syscallabi.BoolToUintptr(partialDisk)
	gosimOS.dispatchSyscall(syscall)
	err = syscallabi.ErrnoErr(syscall.Errno)
	return
}

//go:norace
func SyscallMachineSetBootProgram(machineID int, program any) (err error) {
	// invokes (for go to definition):
	_ = (*GosimOS).MachineSetBootProgram
	syscall := syscallabi.GetGoroutineLocalSyscall()
	syscall.OS = gosimOS
	syscall.Trap = 1012
	syscall.Int0 = uintptr(machineID)
	syscall.Ptr1 = program
	gosimOS.dispatchSyscall(syscall)
	err = syscallabi.ErrnoErr(syscall.Errno)
	syscall.Ptr1 = nil
	return
}

//go:norace
func SyscallMachineSetSometimesCrashOnSync(machineID int, crash bool) (err error) {
	// invokes (for go to definition):
	_ = (*GosimOS).MachineSetSometimesCrashOnSync
	syscall := syscallabi.GetGoroutineLocalSyscall()
	syscall.OS = gosimOS
	syscall.Trap = 1013
	syscall.Int0 = uintptr(machineID)
	syscall.Int1 = syscallabi.BoolToUintptr(crash)
	gosimOS.dispatchSyscall(syscall)
	err = syscallabi.ErrnoErr(syscall.Errno)
	return
}

//go:norace
func SyscallMachineStop(machineID int, graceful bool) {
	// invokes (for go to definition):
	_ = (*GosimOS).MachineStop
	syscall := syscallabi.GetGoroutineLocalSyscall()
	syscall.OS = gosimOS
	syscall.Trap = 1004
	syscall.Int0 = uintptr(machineID)
	syscall.Int1 = syscallabi.BoolToUintptr(graceful)
	gosimOS.dispatchSyscall(syscall)
	return
}

//go:norace
func SyscallMachineWait(machineID int) {
	// invokes (for go to definition):
	_ = (*GosimOS).MachineWait
	syscall := syscallabi.GetGoroutineLocalSyscall()
	syscall.OS = gosimOS
	syscall.Trap = 1006
	syscall.Int0 = uintptr(machineID)
	gosimOS.dispatchSyscall(syscall)
	return
}

//go:norace
func SyscallSetConnected(a string, b string, connected bool) (err error) {
	// invokes (for go to definition):
	_ = (*GosimOS).SetConnected
	syscall := syscallabi.GetGoroutineLocalSyscall()
	syscall.OS = gosimOS
	syscall.Trap = 1001
	syscall.Ptr0 = a
	syscall.Ptr1 = b
	syscall.Int2 = syscallabi.BoolToUintptr(connected)
	gosimOS.dispatchSyscall(syscall)
	err = syscallabi.ErrnoErr(syscall.Errno)
	syscall.Ptr0 = nil
	syscall.Ptr1 = nil
	return
}

//go:norace
func SyscallSetDelay(a string, b string, delay time.Duration) (err error) {
	// invokes (for go to definition):
	_ = (*GosimOS).SetDelay
	syscall := syscallabi.GetGoroutineLocalSyscall()
	syscall.OS = gosimOS
	syscall.Trap = 1002
	syscall.Ptr0 = a
	syscall.Ptr1 = b
	syscall.Int2 = uintptr(delay)
	gosimOS.dispatchSyscall(syscall)
	err = syscallabi.ErrnoErr(syscall.Errno)
	syscall.Ptr0 = nil
	syscall.Ptr1 = nil
	return
}

//go:norace
func SyscallSetSimulationTimeout(timeout time.Duration) (err error) {
	// invokes (for go to definition):
	_ = (*GosimOS).SetSimulationTimeout
	syscall := syscallabi.GetGoroutineLocalSyscall()
	syscall.OS = gosimOS
	syscall.Trap = 1000
	syscall.Int0 = uintptr(timeout)
	gosimOS.dispatchSyscall(syscall)
	err = syscallabi.ErrnoErr(syscall.Errno)
	return
}
