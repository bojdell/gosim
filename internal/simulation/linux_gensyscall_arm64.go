//go:build linux

// Code generated by gensyscall. DO NOT EDIT.
package simulation

import (
	"syscall"
	"time"
	"unsafe"

	"golang.org/x/sys/unix"

	"github.com/jellevandenhooff/gosim/internal/simulation/fs"
	"github.com/jellevandenhooff/gosim/internal/simulation/syscallabi"
)

// prevent unused imports
var (
	_ unsafe.Pointer
	_ time.Duration
	_ syscallabi.ValueView[any]
	_ syscall.Errno
	_ fs.InodeInfo
	_ unix.Errno
)

// linuxOSIface is the interface *LinuxOS must implement to work
// with HandleSyscall. The interface is not used but helpful for implementing
// new syscalls.
type linuxOSIface interface {
	PollClose(fd int, desc syscallabi.ValueView[syscallabi.PollDesc]) (code int)
	PollOpen(fd int, desc syscallabi.ValueView[syscallabi.PollDesc]) (code int)
	SysAccept4(s int, rsa syscallabi.ValueView[RawSockaddrAny], addrlen syscallabi.ValueView[Socklen], flags int) (fd int, err error)
	SysBind(s int, addr unsafe.Pointer, addrlen Socklen) (err error)
	SysChdir(path string) (err error)
	SysClose(fd int) (err error)
	SysConnect(s int, addr unsafe.Pointer, addrlen Socklen) (err error)
	SysFcntl(fd int, cmd int, arg int) (val int, err error)
	SysFdatasync(fd int) (err error)
	SysFlock(fd int, how int) (err error)
	SysFstat(fd int, stat syscallabi.ValueView[Stat_t]) (err error)
	SysFstatat(dirfd int, path string, stat syscallabi.ValueView[Stat_t], flags int) (err error)
	SysFsync(fd int) (err error)
	SysFtruncate(fd int, length int64) (err error)
	SysGetcwd(buf syscallabi.SliceView[byte]) (n int, err error)
	SysGetdents64(fd int, buf syscallabi.SliceView[byte]) (n int, err error)
	SysGetpeername(fd int, rsa syscallabi.ValueView[RawSockaddrAny], addrlen syscallabi.ValueView[Socklen]) (err error)
	SysGetpid() (pid int)
	SysGetrandom(buf syscallabi.SliceView[byte], flags int) (n int, err error)
	SysGetsockname(fd int, rsa syscallabi.ValueView[RawSockaddrAny], addrlen syscallabi.ValueView[Socklen]) (err error)
	SysGetsockopt(s int, level int, name int, val unsafe.Pointer, vallen syscallabi.ValueView[Socklen]) (err error)
	SysListen(s int, n int) (err error)
	SysMadvise(b syscallabi.SliceView[byte], advice int) (err error)
	SysMkdirat(dirfd int, path string, mode uint32) (err error)
	SysMmap(addr uintptr, length uintptr, prot int, flags int, fd int, offset int64) (xaddr uintptr, err error)
	SysMunmap(addr uintptr, length uintptr) (err error)
	SysOpenat(dirfd int, path string, flags int, mode uint32) (fd int, err error)
	SysPread64(fd int, p syscallabi.SliceView[byte], offset int64) (n int, err error)
	SysPwrite64(fd int, p syscallabi.SliceView[byte], offset int64) (n int, err error)
	SysRead(fd int, p syscallabi.SliceView[byte]) (n int, err error)
	SysRenameat(olddirfd int, oldpath string, newdirfd int, newpath string) (err error)
	SysSetsockopt(s int, level int, name int, val unsafe.Pointer, vallen uintptr) (err error)
	SysSocket(domain int, typ int, proto int) (fd int, err error)
	SysUname(buf syscallabi.ValueView[Utsname]) (err error)
	SysUnlinkat(dirfd int, path string, flags int) (err error)
	SysWrite(fd int, p syscallabi.SliceView[byte]) (n int, err error)
}

var _ linuxOSIface = &LinuxOS{}

//go:norace
func (os *LinuxOS) dispatchSyscall(s *syscallabi.Syscall) {
	// XXX: help this happens for globals in os
	if os == nil {
		s.Errno = uintptr(syscall.ENOSYS)
		return
	}
	os.dispatcher.Dispatch(s)
}

//go:norace
func (os *LinuxOS) HandleSyscall(syscall *syscallabi.Syscall) {
	switch syscall.Trap {
	case 1001:
		// called by (for find references):
		_ = SyscallPollClose
		fd := int(syscall.Int0)
		desc := syscallabi.NewValueView(syscall.Ptr1.(*syscallabi.PollDesc))
		code := os.PollClose(fd, desc)
		syscall.R0 = uintptr(code)
		syscall.Complete()
	case 1000:
		// called by (for find references):
		_ = SyscallPollOpen
		fd := int(syscall.Int0)
		desc := syscallabi.NewValueView(syscall.Ptr1.(*syscallabi.PollDesc))
		code := os.PollOpen(fd, desc)
		syscall.R0 = uintptr(code)
		syscall.Complete()
	case unix.SYS_ACCEPT4:
		// called by (for find references):
		_ = SyscallSysAccept4
		s := int(syscall.Int0)
		rsa := syscallabi.NewValueView(syscall.Ptr1.(*RawSockaddrAny))
		addrlen := syscallabi.NewValueView(syscall.Ptr2.(*Socklen))
		flags := int(syscall.Int3)
		fd, err := os.SysAccept4(s, rsa, addrlen, flags)
		syscall.R0 = uintptr(fd)
		syscall.Errno = syscallabi.ErrErrno(err)
		syscall.Complete()
	case unix.SYS_BIND:
		// called by (for find references):
		_ = SyscallSysBind
		s := int(syscall.Int0)
		addr := syscall.Ptr1.(unsafe.Pointer)
		addrlen := Socklen(syscall.Int2)
		err := os.SysBind(s, addr, addrlen)
		syscall.Errno = syscallabi.ErrErrno(err)
		syscall.Complete()
	case unix.SYS_CHDIR:
		// called by (for find references):
		_ = SyscallSysChdir
		path := syscall.Ptr0.(string)
		err := os.SysChdir(path)
		syscall.Errno = syscallabi.ErrErrno(err)
		syscall.Complete()
	case unix.SYS_CLOSE:
		// called by (for find references):
		_ = SyscallSysClose
		fd := int(syscall.Int0)
		err := os.SysClose(fd)
		syscall.Errno = syscallabi.ErrErrno(err)
		syscall.Complete()
	case unix.SYS_CONNECT:
		// called by (for find references):
		_ = SyscallSysConnect
		s := int(syscall.Int0)
		addr := syscall.Ptr1.(unsafe.Pointer)
		addrlen := Socklen(syscall.Int2)
		err := os.SysConnect(s, addr, addrlen)
		syscall.Errno = syscallabi.ErrErrno(err)
		syscall.Complete()
	case unix.SYS_FCNTL:
		// called by (for find references):
		_ = SyscallSysFcntl
		fd := int(syscall.Int0)
		cmd := int(syscall.Int1)
		arg := int(syscall.Int2)
		val, err := os.SysFcntl(fd, cmd, arg)
		syscall.R0 = uintptr(val)
		syscall.Errno = syscallabi.ErrErrno(err)
		syscall.Complete()
	case unix.SYS_FDATASYNC:
		// called by (for find references):
		_ = SyscallSysFdatasync
		fd := int(syscall.Int0)
		err := os.SysFdatasync(fd)
		syscall.Errno = syscallabi.ErrErrno(err)
		syscall.Complete()
	case unix.SYS_FLOCK:
		// called by (for find references):
		_ = SyscallSysFlock
		fd := int(syscall.Int0)
		how := int(syscall.Int1)
		err := os.SysFlock(fd, how)
		syscall.Errno = syscallabi.ErrErrno(err)
		syscall.Complete()
	case unix.SYS_FSTAT:
		// called by (for find references):
		_ = SyscallSysFstat
		fd := int(syscall.Int0)
		stat := syscallabi.NewValueView(syscall.Ptr1.(*Stat_t))
		err := os.SysFstat(fd, stat)
		syscall.Errno = syscallabi.ErrErrno(err)
		syscall.Complete()
	case unix.SYS_FSTATAT:
		// called by (for find references):
		_ = SyscallSysFstatat
		dirfd := int(syscall.Int0)
		path := syscall.Ptr1.(string)
		stat := syscallabi.NewValueView(syscall.Ptr2.(*Stat_t))
		flags := int(syscall.Int3)
		err := os.SysFstatat(dirfd, path, stat, flags)
		syscall.Errno = syscallabi.ErrErrno(err)
		syscall.Complete()
	case unix.SYS_FSYNC:
		// called by (for find references):
		_ = SyscallSysFsync
		fd := int(syscall.Int0)
		err := os.SysFsync(fd)
		syscall.Errno = syscallabi.ErrErrno(err)
		syscall.Complete()
	case unix.SYS_FTRUNCATE:
		// called by (for find references):
		_ = SyscallSysFtruncate
		fd := int(syscall.Int0)
		length := int64(syscall.Int1)
		err := os.SysFtruncate(fd, length)
		syscall.Errno = syscallabi.ErrErrno(err)
		syscall.Complete()
	case unix.SYS_GETCWD:
		// called by (for find references):
		_ = SyscallSysGetcwd
		buf := syscallabi.NewSliceView(syscall.Ptr0.(*byte), syscall.Int0)
		n, err := os.SysGetcwd(buf)
		syscall.R0 = uintptr(n)
		syscall.Errno = syscallabi.ErrErrno(err)
		syscall.Complete()
	case unix.SYS_GETDENTS64:
		// called by (for find references):
		_ = SyscallSysGetdents64
		fd := int(syscall.Int0)
		buf := syscallabi.NewSliceView(syscall.Ptr1.(*byte), syscall.Int1)
		n, err := os.SysGetdents64(fd, buf)
		syscall.R0 = uintptr(n)
		syscall.Errno = syscallabi.ErrErrno(err)
		syscall.Complete()
	case unix.SYS_GETPEERNAME:
		// called by (for find references):
		_ = SyscallSysGetpeername
		fd := int(syscall.Int0)
		rsa := syscallabi.NewValueView(syscall.Ptr1.(*RawSockaddrAny))
		addrlen := syscallabi.NewValueView(syscall.Ptr2.(*Socklen))
		err := os.SysGetpeername(fd, rsa, addrlen)
		syscall.Errno = syscallabi.ErrErrno(err)
		syscall.Complete()
	case unix.SYS_GETPID:
		// called by (for find references):
		_ = SyscallSysGetpid
		pid := os.SysGetpid()
		syscall.R0 = uintptr(pid)
		syscall.Complete()
	case unix.SYS_GETRANDOM:
		// called by (for find references):
		_ = SyscallSysGetrandom
		buf := syscallabi.NewSliceView(syscall.Ptr0.(*byte), syscall.Int0)
		flags := int(syscall.Int1)
		n, err := os.SysGetrandom(buf, flags)
		syscall.R0 = uintptr(n)
		syscall.Errno = syscallabi.ErrErrno(err)
		syscall.Complete()
	case unix.SYS_GETSOCKNAME:
		// called by (for find references):
		_ = SyscallSysGetsockname
		fd := int(syscall.Int0)
		rsa := syscallabi.NewValueView(syscall.Ptr1.(*RawSockaddrAny))
		addrlen := syscallabi.NewValueView(syscall.Ptr2.(*Socklen))
		err := os.SysGetsockname(fd, rsa, addrlen)
		syscall.Errno = syscallabi.ErrErrno(err)
		syscall.Complete()
	case unix.SYS_GETSOCKOPT:
		// called by (for find references):
		_ = SyscallSysGetsockopt
		s := int(syscall.Int0)
		level := int(syscall.Int1)
		name := int(syscall.Int2)
		val := syscall.Ptr3.(unsafe.Pointer)
		vallen := syscallabi.NewValueView(syscall.Ptr4.(*Socklen))
		err := os.SysGetsockopt(s, level, name, val, vallen)
		syscall.Errno = syscallabi.ErrErrno(err)
		syscall.Complete()
	case unix.SYS_LISTEN:
		// called by (for find references):
		_ = SyscallSysListen
		s := int(syscall.Int0)
		n := int(syscall.Int1)
		err := os.SysListen(s, n)
		syscall.Errno = syscallabi.ErrErrno(err)
		syscall.Complete()
	case unix.SYS_MADVISE:
		// called by (for find references):
		_ = SyscallSysMadvise
		b := syscallabi.NewSliceView(syscall.Ptr0.(*byte), syscall.Int0)
		advice := int(syscall.Int1)
		err := os.SysMadvise(b, advice)
		syscall.Errno = syscallabi.ErrErrno(err)
		syscall.Complete()
	case unix.SYS_MKDIRAT:
		// called by (for find references):
		_ = SyscallSysMkdirat
		dirfd := int(syscall.Int0)
		path := syscall.Ptr1.(string)
		mode := uint32(syscall.Int2)
		err := os.SysMkdirat(dirfd, path, mode)
		syscall.Errno = syscallabi.ErrErrno(err)
		syscall.Complete()
	case unix.SYS_MMAP:
		// called by (for find references):
		_ = SyscallSysMmap
		addr := uintptr(syscall.Int0)
		length := uintptr(syscall.Int1)
		prot := int(syscall.Int2)
		flags := int(syscall.Int3)
		fd := int(syscall.Int4)
		offset := int64(syscall.Int5)
		xaddr, err := os.SysMmap(addr, length, prot, flags, fd, offset)
		syscall.R0 = uintptr(xaddr)
		syscall.Errno = syscallabi.ErrErrno(err)
		syscall.Complete()
	case unix.SYS_MUNMAP:
		// called by (for find references):
		_ = SyscallSysMunmap
		addr := uintptr(syscall.Int0)
		length := uintptr(syscall.Int1)
		err := os.SysMunmap(addr, length)
		syscall.Errno = syscallabi.ErrErrno(err)
		syscall.Complete()
	case unix.SYS_OPENAT:
		// called by (for find references):
		_ = SyscallSysOpenat
		dirfd := int(syscall.Int0)
		path := syscall.Ptr1.(string)
		flags := int(syscall.Int2)
		mode := uint32(syscall.Int3)
		fd, err := os.SysOpenat(dirfd, path, flags, mode)
		syscall.R0 = uintptr(fd)
		syscall.Errno = syscallabi.ErrErrno(err)
		syscall.Complete()
	case unix.SYS_PREAD64:
		// called by (for find references):
		_ = SyscallSysPread64
		fd := int(syscall.Int0)
		p := syscallabi.NewSliceView(syscall.Ptr1.(*byte), syscall.Int1)
		offset := int64(syscall.Int2)
		n, err := os.SysPread64(fd, p, offset)
		syscall.R0 = uintptr(n)
		syscall.Errno = syscallabi.ErrErrno(err)
		syscall.Complete()
	case unix.SYS_PWRITE64:
		// called by (for find references):
		_ = SyscallSysPwrite64
		fd := int(syscall.Int0)
		p := syscallabi.NewSliceView(syscall.Ptr1.(*byte), syscall.Int1)
		offset := int64(syscall.Int2)
		n, err := os.SysPwrite64(fd, p, offset)
		syscall.R0 = uintptr(n)
		syscall.Errno = syscallabi.ErrErrno(err)
		syscall.Complete()
	case unix.SYS_READ:
		// called by (for find references):
		_ = SyscallSysRead
		fd := int(syscall.Int0)
		p := syscallabi.NewSliceView(syscall.Ptr1.(*byte), syscall.Int1)
		n, err := os.SysRead(fd, p)
		syscall.R0 = uintptr(n)
		syscall.Errno = syscallabi.ErrErrno(err)
		syscall.Complete()
	case unix.SYS_RENAMEAT:
		// called by (for find references):
		_ = SyscallSysRenameat
		olddirfd := int(syscall.Int0)
		oldpath := syscall.Ptr1.(string)
		newdirfd := int(syscall.Int2)
		newpath := syscall.Ptr3.(string)
		err := os.SysRenameat(olddirfd, oldpath, newdirfd, newpath)
		syscall.Errno = syscallabi.ErrErrno(err)
		syscall.Complete()
	case unix.SYS_SETSOCKOPT:
		// called by (for find references):
		_ = SyscallSysSetsockopt
		s := int(syscall.Int0)
		level := int(syscall.Int1)
		name := int(syscall.Int2)
		val := syscall.Ptr3.(unsafe.Pointer)
		vallen := uintptr(syscall.Int4)
		err := os.SysSetsockopt(s, level, name, val, vallen)
		syscall.Errno = syscallabi.ErrErrno(err)
		syscall.Complete()
	case unix.SYS_SOCKET:
		// called by (for find references):
		_ = SyscallSysSocket
		domain := int(syscall.Int0)
		typ := int(syscall.Int1)
		proto := int(syscall.Int2)
		fd, err := os.SysSocket(domain, typ, proto)
		syscall.R0 = uintptr(fd)
		syscall.Errno = syscallabi.ErrErrno(err)
		syscall.Complete()
	case unix.SYS_UNAME:
		// called by (for find references):
		_ = SyscallSysUname
		buf := syscallabi.NewValueView(syscall.Ptr0.(*Utsname))
		err := os.SysUname(buf)
		syscall.Errno = syscallabi.ErrErrno(err)
		syscall.Complete()
	case unix.SYS_UNLINKAT:
		// called by (for find references):
		_ = SyscallSysUnlinkat
		dirfd := int(syscall.Int0)
		path := syscall.Ptr1.(string)
		flags := int(syscall.Int2)
		err := os.SysUnlinkat(dirfd, path, flags)
		syscall.Errno = syscallabi.ErrErrno(err)
		syscall.Complete()
	case unix.SYS_WRITE:
		// called by (for find references):
		_ = SyscallSysWrite
		fd := int(syscall.Int0)
		p := syscallabi.NewSliceView(syscall.Ptr1.(*byte), syscall.Int1)
		n, err := os.SysWrite(fd, p)
		syscall.R0 = uintptr(n)
		syscall.Errno = syscallabi.ErrErrno(err)
		syscall.Complete()
	default:
		panic("bad")
	}
}

//go:norace
func SyscallPollClose(fd int, desc *syscallabi.PollDesc) (code int) {
	// invokes (for go to definition):
	_ = (*LinuxOS).PollClose
	syscall := syscallabi.GetGoroutineLocalSyscall()
	syscall.OS = linuxOS
	syscall.Trap = 1001
	syscall.Int0 = uintptr(fd)
	syscall.Ptr1 = desc
	linuxOS.dispatchSyscall(syscall)
	code = int(syscall.R0)
	syscall.Ptr1 = nil
	return
}

//go:norace
func SyscallPollOpen(fd int, desc *syscallabi.PollDesc) (code int) {
	// invokes (for go to definition):
	_ = (*LinuxOS).PollOpen
	syscall := syscallabi.GetGoroutineLocalSyscall()
	syscall.OS = linuxOS
	syscall.Trap = 1000
	syscall.Int0 = uintptr(fd)
	syscall.Ptr1 = desc
	linuxOS.dispatchSyscall(syscall)
	code = int(syscall.R0)
	syscall.Ptr1 = nil
	return
}

//go:norace
func SyscallSysAccept4(s int, rsa *RawSockaddrAny, addrlen *Socklen, flags int) (fd int, err error) {
	// invokes (for go to definition):
	_ = (*LinuxOS).SysAccept4
	syscall := syscallabi.GetGoroutineLocalSyscall()
	syscall.OS = linuxOS
	syscall.Trap = unix.SYS_ACCEPT4
	syscall.Int0 = uintptr(s)
	syscall.Ptr1 = rsa
	syscall.Ptr2 = addrlen
	syscall.Int3 = uintptr(flags)
	linuxOS.dispatchSyscall(syscall)
	fd = int(syscall.R0)
	err = syscallabi.ErrnoErr(syscall.Errno)
	syscall.Ptr1 = nil
	syscall.Ptr2 = nil
	return
}

//go:norace
func SyscallSysBind(s int, addr unsafe.Pointer, addrlen Socklen) (err error) {
	// invokes (for go to definition):
	_ = (*LinuxOS).SysBind
	syscall := syscallabi.GetGoroutineLocalSyscall()
	syscall.OS = linuxOS
	syscall.Trap = unix.SYS_BIND
	syscall.Int0 = uintptr(s)
	syscall.Ptr1 = addr
	syscall.Int2 = uintptr(addrlen)
	linuxOS.dispatchSyscall(syscall)
	err = syscallabi.ErrnoErr(syscall.Errno)
	syscall.Ptr1 = nil
	return
}

//go:norace
func SyscallSysChdir(path string) (err error) {
	// invokes (for go to definition):
	_ = (*LinuxOS).SysChdir
	syscall := syscallabi.GetGoroutineLocalSyscall()
	syscall.OS = linuxOS
	syscall.Trap = unix.SYS_CHDIR
	syscall.Ptr0 = path
	linuxOS.dispatchSyscall(syscall)
	err = syscallabi.ErrnoErr(syscall.Errno)
	syscall.Ptr0 = nil
	return
}

//go:norace
func SyscallSysClose(fd int) (err error) {
	// invokes (for go to definition):
	_ = (*LinuxOS).SysClose
	syscall := syscallabi.GetGoroutineLocalSyscall()
	syscall.OS = linuxOS
	syscall.Trap = unix.SYS_CLOSE
	syscall.Int0 = uintptr(fd)
	linuxOS.dispatchSyscall(syscall)
	err = syscallabi.ErrnoErr(syscall.Errno)
	return
}

//go:norace
func SyscallSysConnect(s int, addr unsafe.Pointer, addrlen Socklen) (err error) {
	// invokes (for go to definition):
	_ = (*LinuxOS).SysConnect
	syscall := syscallabi.GetGoroutineLocalSyscall()
	syscall.OS = linuxOS
	syscall.Trap = unix.SYS_CONNECT
	syscall.Int0 = uintptr(s)
	syscall.Ptr1 = addr
	syscall.Int2 = uintptr(addrlen)
	linuxOS.dispatchSyscall(syscall)
	err = syscallabi.ErrnoErr(syscall.Errno)
	syscall.Ptr1 = nil
	return
}

//go:norace
func SyscallSysFcntl(fd int, cmd int, arg int) (val int, err error) {
	// invokes (for go to definition):
	_ = (*LinuxOS).SysFcntl
	syscall := syscallabi.GetGoroutineLocalSyscall()
	syscall.OS = linuxOS
	syscall.Trap = unix.SYS_FCNTL
	syscall.Int0 = uintptr(fd)
	syscall.Int1 = uintptr(cmd)
	syscall.Int2 = uintptr(arg)
	linuxOS.dispatchSyscall(syscall)
	val = int(syscall.R0)
	err = syscallabi.ErrnoErr(syscall.Errno)
	return
}

//go:norace
func SyscallSysFdatasync(fd int) (err error) {
	// invokes (for go to definition):
	_ = (*LinuxOS).SysFdatasync
	syscall := syscallabi.GetGoroutineLocalSyscall()
	syscall.OS = linuxOS
	syscall.Trap = unix.SYS_FDATASYNC
	syscall.Int0 = uintptr(fd)
	linuxOS.dispatchSyscall(syscall)
	err = syscallabi.ErrnoErr(syscall.Errno)
	return
}

//go:norace
func SyscallSysFlock(fd int, how int) (err error) {
	// invokes (for go to definition):
	_ = (*LinuxOS).SysFlock
	syscall := syscallabi.GetGoroutineLocalSyscall()
	syscall.OS = linuxOS
	syscall.Trap = unix.SYS_FLOCK
	syscall.Int0 = uintptr(fd)
	syscall.Int1 = uintptr(how)
	linuxOS.dispatchSyscall(syscall)
	err = syscallabi.ErrnoErr(syscall.Errno)
	return
}

//go:norace
func SyscallSysFstat(fd int, stat *Stat_t) (err error) {
	// invokes (for go to definition):
	_ = (*LinuxOS).SysFstat
	syscall := syscallabi.GetGoroutineLocalSyscall()
	syscall.OS = linuxOS
	syscall.Trap = unix.SYS_FSTAT
	syscall.Int0 = uintptr(fd)
	syscall.Ptr1 = stat
	linuxOS.dispatchSyscall(syscall)
	err = syscallabi.ErrnoErr(syscall.Errno)
	syscall.Ptr1 = nil
	return
}

//go:norace
func SyscallSysFstatat(dirfd int, path string, stat *Stat_t, flags int) (err error) {
	// invokes (for go to definition):
	_ = (*LinuxOS).SysFstatat
	syscall := syscallabi.GetGoroutineLocalSyscall()
	syscall.OS = linuxOS
	syscall.Trap = unix.SYS_FSTATAT
	syscall.Int0 = uintptr(dirfd)
	syscall.Ptr1 = path
	syscall.Ptr2 = stat
	syscall.Int3 = uintptr(flags)
	linuxOS.dispatchSyscall(syscall)
	err = syscallabi.ErrnoErr(syscall.Errno)
	syscall.Ptr1 = nil
	syscall.Ptr2 = nil
	return
}

//go:norace
func SyscallSysFsync(fd int) (err error) {
	// invokes (for go to definition):
	_ = (*LinuxOS).SysFsync
	syscall := syscallabi.GetGoroutineLocalSyscall()
	syscall.OS = linuxOS
	syscall.Trap = unix.SYS_FSYNC
	syscall.Int0 = uintptr(fd)
	linuxOS.dispatchSyscall(syscall)
	err = syscallabi.ErrnoErr(syscall.Errno)
	return
}

//go:norace
func SyscallSysFtruncate(fd int, length int64) (err error) {
	// invokes (for go to definition):
	_ = (*LinuxOS).SysFtruncate
	syscall := syscallabi.GetGoroutineLocalSyscall()
	syscall.OS = linuxOS
	syscall.Trap = unix.SYS_FTRUNCATE
	syscall.Int0 = uintptr(fd)
	syscall.Int1 = uintptr(length)
	linuxOS.dispatchSyscall(syscall)
	err = syscallabi.ErrnoErr(syscall.Errno)
	return
}

//go:norace
func SyscallSysGetcwd(buf []byte) (n int, err error) {
	// invokes (for go to definition):
	_ = (*LinuxOS).SysGetcwd
	syscall := syscallabi.GetGoroutineLocalSyscall()
	syscall.OS = linuxOS
	syscall.Trap = unix.SYS_GETCWD
	syscall.Ptr0, syscall.Int0 = unsafe.SliceData(buf), uintptr(len(buf))
	linuxOS.dispatchSyscall(syscall)
	n = int(syscall.R0)
	err = syscallabi.ErrnoErr(syscall.Errno)
	syscall.Ptr0 = nil
	return
}

//go:norace
func SyscallSysGetdents64(fd int, buf []byte) (n int, err error) {
	// invokes (for go to definition):
	_ = (*LinuxOS).SysGetdents64
	syscall := syscallabi.GetGoroutineLocalSyscall()
	syscall.OS = linuxOS
	syscall.Trap = unix.SYS_GETDENTS64
	syscall.Int0 = uintptr(fd)
	syscall.Ptr1, syscall.Int1 = unsafe.SliceData(buf), uintptr(len(buf))
	linuxOS.dispatchSyscall(syscall)
	n = int(syscall.R0)
	err = syscallabi.ErrnoErr(syscall.Errno)
	syscall.Ptr1 = nil
	return
}

//go:norace
func SyscallSysGetpeername(fd int, rsa *RawSockaddrAny, addrlen *Socklen) (err error) {
	// invokes (for go to definition):
	_ = (*LinuxOS).SysGetpeername
	syscall := syscallabi.GetGoroutineLocalSyscall()
	syscall.OS = linuxOS
	syscall.Trap = unix.SYS_GETPEERNAME
	syscall.Int0 = uintptr(fd)
	syscall.Ptr1 = rsa
	syscall.Ptr2 = addrlen
	linuxOS.dispatchSyscall(syscall)
	err = syscallabi.ErrnoErr(syscall.Errno)
	syscall.Ptr1 = nil
	syscall.Ptr2 = nil
	return
}

//go:norace
func SyscallSysGetpid() (pid int) {
	// invokes (for go to definition):
	_ = (*LinuxOS).SysGetpid
	syscall := syscallabi.GetGoroutineLocalSyscall()
	syscall.OS = linuxOS
	syscall.Trap = unix.SYS_GETPID
	linuxOS.dispatchSyscall(syscall)
	pid = int(syscall.R0)
	return
}

//go:norace
func SyscallSysGetrandom(buf []byte, flags int) (n int, err error) {
	// invokes (for go to definition):
	_ = (*LinuxOS).SysGetrandom
	syscall := syscallabi.GetGoroutineLocalSyscall()
	syscall.OS = linuxOS
	syscall.Trap = unix.SYS_GETRANDOM
	syscall.Ptr0, syscall.Int0 = unsafe.SliceData(buf), uintptr(len(buf))
	syscall.Int1 = uintptr(flags)
	linuxOS.dispatchSyscall(syscall)
	n = int(syscall.R0)
	err = syscallabi.ErrnoErr(syscall.Errno)
	syscall.Ptr0 = nil
	return
}

//go:norace
func SyscallSysGetsockname(fd int, rsa *RawSockaddrAny, addrlen *Socklen) (err error) {
	// invokes (for go to definition):
	_ = (*LinuxOS).SysGetsockname
	syscall := syscallabi.GetGoroutineLocalSyscall()
	syscall.OS = linuxOS
	syscall.Trap = unix.SYS_GETSOCKNAME
	syscall.Int0 = uintptr(fd)
	syscall.Ptr1 = rsa
	syscall.Ptr2 = addrlen
	linuxOS.dispatchSyscall(syscall)
	err = syscallabi.ErrnoErr(syscall.Errno)
	syscall.Ptr1 = nil
	syscall.Ptr2 = nil
	return
}

//go:norace
func SyscallSysGetsockopt(s int, level int, name int, val unsafe.Pointer, vallen *Socklen) (err error) {
	// invokes (for go to definition):
	_ = (*LinuxOS).SysGetsockopt
	syscall := syscallabi.GetGoroutineLocalSyscall()
	syscall.OS = linuxOS
	syscall.Trap = unix.SYS_GETSOCKOPT
	syscall.Int0 = uintptr(s)
	syscall.Int1 = uintptr(level)
	syscall.Int2 = uintptr(name)
	syscall.Ptr3 = val
	syscall.Ptr4 = vallen
	linuxOS.dispatchSyscall(syscall)
	err = syscallabi.ErrnoErr(syscall.Errno)
	syscall.Ptr3 = nil
	syscall.Ptr4 = nil
	return
}

//go:norace
func SyscallSysListen(s int, n int) (err error) {
	// invokes (for go to definition):
	_ = (*LinuxOS).SysListen
	syscall := syscallabi.GetGoroutineLocalSyscall()
	syscall.OS = linuxOS
	syscall.Trap = unix.SYS_LISTEN
	syscall.Int0 = uintptr(s)
	syscall.Int1 = uintptr(n)
	linuxOS.dispatchSyscall(syscall)
	err = syscallabi.ErrnoErr(syscall.Errno)
	return
}

//go:norace
func SyscallSysMadvise(b []byte, advice int) (err error) {
	// invokes (for go to definition):
	_ = (*LinuxOS).SysMadvise
	syscall := syscallabi.GetGoroutineLocalSyscall()
	syscall.OS = linuxOS
	syscall.Trap = unix.SYS_MADVISE
	syscall.Ptr0, syscall.Int0 = unsafe.SliceData(b), uintptr(len(b))
	syscall.Int1 = uintptr(advice)
	linuxOS.dispatchSyscall(syscall)
	err = syscallabi.ErrnoErr(syscall.Errno)
	syscall.Ptr0 = nil
	return
}

//go:norace
func SyscallSysMkdirat(dirfd int, path string, mode uint32) (err error) {
	// invokes (for go to definition):
	_ = (*LinuxOS).SysMkdirat
	syscall := syscallabi.GetGoroutineLocalSyscall()
	syscall.OS = linuxOS
	syscall.Trap = unix.SYS_MKDIRAT
	syscall.Int0 = uintptr(dirfd)
	syscall.Ptr1 = path
	syscall.Int2 = uintptr(mode)
	linuxOS.dispatchSyscall(syscall)
	err = syscallabi.ErrnoErr(syscall.Errno)
	syscall.Ptr1 = nil
	return
}

//go:norace
func SyscallSysMmap(addr uintptr, length uintptr, prot int, flags int, fd int, offset int64) (xaddr uintptr, err error) {
	// invokes (for go to definition):
	_ = (*LinuxOS).SysMmap
	syscall := syscallabi.GetGoroutineLocalSyscall()
	syscall.OS = linuxOS
	syscall.Trap = unix.SYS_MMAP
	syscall.Int0 = uintptr(addr)
	syscall.Int1 = uintptr(length)
	syscall.Int2 = uintptr(prot)
	syscall.Int3 = uintptr(flags)
	syscall.Int4 = uintptr(fd)
	syscall.Int5 = uintptr(offset)
	linuxOS.dispatchSyscall(syscall)
	xaddr = uintptr(syscall.R0)
	err = syscallabi.ErrnoErr(syscall.Errno)
	return
}

//go:norace
func SyscallSysMunmap(addr uintptr, length uintptr) (err error) {
	// invokes (for go to definition):
	_ = (*LinuxOS).SysMunmap
	syscall := syscallabi.GetGoroutineLocalSyscall()
	syscall.OS = linuxOS
	syscall.Trap = unix.SYS_MUNMAP
	syscall.Int0 = uintptr(addr)
	syscall.Int1 = uintptr(length)
	linuxOS.dispatchSyscall(syscall)
	err = syscallabi.ErrnoErr(syscall.Errno)
	return
}

//go:norace
func SyscallSysOpenat(dirfd int, path string, flags int, mode uint32) (fd int, err error) {
	// invokes (for go to definition):
	_ = (*LinuxOS).SysOpenat
	syscall := syscallabi.GetGoroutineLocalSyscall()
	syscall.OS = linuxOS
	syscall.Trap = unix.SYS_OPENAT
	syscall.Int0 = uintptr(dirfd)
	syscall.Ptr1 = path
	syscall.Int2 = uintptr(flags)
	syscall.Int3 = uintptr(mode)
	linuxOS.dispatchSyscall(syscall)
	fd = int(syscall.R0)
	err = syscallabi.ErrnoErr(syscall.Errno)
	syscall.Ptr1 = nil
	return
}

//go:norace
func SyscallSysPread64(fd int, p []byte, offset int64) (n int, err error) {
	// invokes (for go to definition):
	_ = (*LinuxOS).SysPread64
	syscall := syscallabi.GetGoroutineLocalSyscall()
	syscall.OS = linuxOS
	syscall.Trap = unix.SYS_PREAD64
	syscall.Int0 = uintptr(fd)
	syscall.Ptr1, syscall.Int1 = unsafe.SliceData(p), uintptr(len(p))
	syscall.Int2 = uintptr(offset)
	linuxOS.dispatchSyscall(syscall)
	n = int(syscall.R0)
	err = syscallabi.ErrnoErr(syscall.Errno)
	syscall.Ptr1 = nil
	return
}

//go:norace
func SyscallSysPwrite64(fd int, p []byte, offset int64) (n int, err error) {
	// invokes (for go to definition):
	_ = (*LinuxOS).SysPwrite64
	syscall := syscallabi.GetGoroutineLocalSyscall()
	syscall.OS = linuxOS
	syscall.Trap = unix.SYS_PWRITE64
	syscall.Int0 = uintptr(fd)
	syscall.Ptr1, syscall.Int1 = unsafe.SliceData(p), uintptr(len(p))
	syscall.Int2 = uintptr(offset)
	linuxOS.dispatchSyscall(syscall)
	n = int(syscall.R0)
	err = syscallabi.ErrnoErr(syscall.Errno)
	syscall.Ptr1 = nil
	return
}

//go:norace
func SyscallSysRead(fd int, p []byte) (n int, err error) {
	// invokes (for go to definition):
	_ = (*LinuxOS).SysRead
	syscall := syscallabi.GetGoroutineLocalSyscall()
	syscall.OS = linuxOS
	syscall.Trap = unix.SYS_READ
	syscall.Int0 = uintptr(fd)
	syscall.Ptr1, syscall.Int1 = unsafe.SliceData(p), uintptr(len(p))
	linuxOS.dispatchSyscall(syscall)
	n = int(syscall.R0)
	err = syscallabi.ErrnoErr(syscall.Errno)
	syscall.Ptr1 = nil
	return
}

//go:norace
func SyscallSysRenameat(olddirfd int, oldpath string, newdirfd int, newpath string) (err error) {
	// invokes (for go to definition):
	_ = (*LinuxOS).SysRenameat
	syscall := syscallabi.GetGoroutineLocalSyscall()
	syscall.OS = linuxOS
	syscall.Trap = unix.SYS_RENAMEAT
	syscall.Int0 = uintptr(olddirfd)
	syscall.Ptr1 = oldpath
	syscall.Int2 = uintptr(newdirfd)
	syscall.Ptr3 = newpath
	linuxOS.dispatchSyscall(syscall)
	err = syscallabi.ErrnoErr(syscall.Errno)
	syscall.Ptr1 = nil
	syscall.Ptr3 = nil
	return
}

//go:norace
func SyscallSysSetsockopt(s int, level int, name int, val unsafe.Pointer, vallen uintptr) (err error) {
	// invokes (for go to definition):
	_ = (*LinuxOS).SysSetsockopt
	syscall := syscallabi.GetGoroutineLocalSyscall()
	syscall.OS = linuxOS
	syscall.Trap = unix.SYS_SETSOCKOPT
	syscall.Int0 = uintptr(s)
	syscall.Int1 = uintptr(level)
	syscall.Int2 = uintptr(name)
	syscall.Ptr3 = val
	syscall.Int4 = uintptr(vallen)
	linuxOS.dispatchSyscall(syscall)
	err = syscallabi.ErrnoErr(syscall.Errno)
	syscall.Ptr3 = nil
	return
}

//go:norace
func SyscallSysSocket(domain int, typ int, proto int) (fd int, err error) {
	// invokes (for go to definition):
	_ = (*LinuxOS).SysSocket
	syscall := syscallabi.GetGoroutineLocalSyscall()
	syscall.OS = linuxOS
	syscall.Trap = unix.SYS_SOCKET
	syscall.Int0 = uintptr(domain)
	syscall.Int1 = uintptr(typ)
	syscall.Int2 = uintptr(proto)
	linuxOS.dispatchSyscall(syscall)
	fd = int(syscall.R0)
	err = syscallabi.ErrnoErr(syscall.Errno)
	return
}

//go:norace
func SyscallSysUname(buf *Utsname) (err error) {
	// invokes (for go to definition):
	_ = (*LinuxOS).SysUname
	syscall := syscallabi.GetGoroutineLocalSyscall()
	syscall.OS = linuxOS
	syscall.Trap = unix.SYS_UNAME
	syscall.Ptr0 = buf
	linuxOS.dispatchSyscall(syscall)
	err = syscallabi.ErrnoErr(syscall.Errno)
	syscall.Ptr0 = nil
	return
}

//go:norace
func SyscallSysUnlinkat(dirfd int, path string, flags int) (err error) {
	// invokes (for go to definition):
	_ = (*LinuxOS).SysUnlinkat
	syscall := syscallabi.GetGoroutineLocalSyscall()
	syscall.OS = linuxOS
	syscall.Trap = unix.SYS_UNLINKAT
	syscall.Int0 = uintptr(dirfd)
	syscall.Ptr1 = path
	syscall.Int2 = uintptr(flags)
	linuxOS.dispatchSyscall(syscall)
	err = syscallabi.ErrnoErr(syscall.Errno)
	syscall.Ptr1 = nil
	return
}

//go:norace
func SyscallSysWrite(fd int, p []byte) (n int, err error) {
	// invokes (for go to definition):
	_ = (*LinuxOS).SysWrite
	syscall := syscallabi.GetGoroutineLocalSyscall()
	syscall.OS = linuxOS
	syscall.Trap = unix.SYS_WRITE
	syscall.Int0 = uintptr(fd)
	syscall.Ptr1, syscall.Int1 = unsafe.SliceData(p), uintptr(len(p))
	linuxOS.dispatchSyscall(syscall)
	n = int(syscall.R0)
	err = syscallabi.ErrnoErr(syscall.Errno)
	syscall.Ptr1 = nil
	return
}

func IsHandledSyscall(trap uintptr) bool {
	switch trap {
	case unix.SYS_ACCEPT4:
		return true
	case unix.SYS_BIND:
		return true
	case unix.SYS_CHDIR:
		return true
	case unix.SYS_CLOSE:
		return true
	case unix.SYS_CONNECT:
		return true
	case unix.SYS_FCNTL:
		return true
	case unix.SYS_FDATASYNC:
		return true
	case unix.SYS_FLOCK:
		return true
	case unix.SYS_FSTAT:
		return true
	case unix.SYS_FSTATAT:
		return true
	case unix.SYS_FSYNC:
		return true
	case unix.SYS_FTRUNCATE:
		return true
	case unix.SYS_GETCWD:
		return true
	case unix.SYS_GETDENTS64:
		return true
	case unix.SYS_GETPEERNAME:
		return true
	case unix.SYS_GETPID:
		return true
	case unix.SYS_GETRANDOM:
		return true
	case unix.SYS_GETSOCKNAME:
		return true
	case unix.SYS_GETSOCKOPT:
		return true
	case unix.SYS_LISTEN:
		return true
	case unix.SYS_MADVISE:
		return true
	case unix.SYS_MKDIRAT:
		return true
	case unix.SYS_MMAP:
		return true
	case unix.SYS_MUNMAP:
		return true
	case unix.SYS_OPENAT:
		return true
	case unix.SYS_PREAD64:
		return true
	case unix.SYS_PWRITE64:
		return true
	case unix.SYS_READ:
		return true
	case unix.SYS_RENAMEAT:
		return true
	case unix.SYS_SETSOCKOPT:
		return true
	case unix.SYS_SOCKET:
		return true
	case unix.SYS_UNAME:
		return true
	case unix.SYS_UNLINKAT:
		return true
	case unix.SYS_WRITE:
		return true
	default:
		return false
	}
}
